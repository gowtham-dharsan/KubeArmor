#***********************************************************************************************************************************#
# Build_steps stage used to build the source code of the application
#***********************************************************************************************************************************#
build_steps:
  - name: Code Compile
    source: "."
    image:
        name: maven
        docker_run_params: '-u 0:0 -v /root/.m2:/root/.m2'
    commands:
      - "mvn -v"

#***********************************************************************************************************************************#
# Docker_build stage builds the docker image from the Dockerfile
#Docker build mention the name for docker build. specify the dockerfile dirctory where Dockerfile was stored
#Mention Dockerfile name and tag for build
#***********************************************************************************************************************************#
docker_build:
  - name: kubearmor
    Dockerfile_dir: .
    Dockerfile_name: Dockerfile.kubearmor
    pre_steps:
      - ls -l
      - echo cp
    tag: 1.0


#***********************************************************************************************************************************#
# Image properties is to define the artifactory for pull the respective image
# for artifactory credentials use username/API Token combo which was created in jenkins manage credentials.
#***********************************************************************************************************************************#
image_properties:
   artifactory:
     url: https://artifactory.accuknox.com/
     cred: 'accunoxwithnexus'

#***********************************************************************************************************************************#
#if we need to scan the image with trivy change the status: enable: "true" if need to disable the scan change this to "false" 
#Mention the level of scan is mandatory Acceptable Values are CRITICAL, HIGH, MEDIUM, LOW
#pass the artifactory trivyimage for the process
#***********************************************************************************************************************************#
trivy_properties:
   status:
   #Acceptable Values are CRITICAL, HIGH, MEDIUM, LOW
     enabled: "true"
     level: high
     value: "10"  
   image:
       name: artifactory.accuknox.com/accuknox/trivy:latest
       docker_run_params:  --entrypoint='' -v /var/run/docker.sock:/var/run/docker.sock -v /root/.cache/:/root/.cache/

#***********************************************************************************************************************************#
#if we need to scan the image with clair change the status: enable: "true" if need to disable the scan change this to "false" 
#Mention the level of scan is mandatory Acceptable Values are CRITICAL, HIGH, MEDIUM, LOW
#pass the clair service url
#pass the artifactory clair cli image to access clair scanner
#***********************************************************************************************************************************#
clair_properties:
   status:
    #Acceptable Values are CRITICAL, HIGH, MEDIUM, LOW 
     enabled: "false"
     level: high
     value: "10" 
     #pass the clair service url 
     clair_url : "http://clair:6060"
   image:
       name: artifactory.accuknox.com/accuknox/clair-scanner:alpine-3.12.4 #nordri/clair-scanner:latest
       docker_run_params:  --entrypoint='' -v /var/run/docker.sock:/var/run/docker.sock -v /root/.cache/:/root/.cache/
      
#***********************************************************************************************************************************#
#if we need to scan the image with anchore change the status: enable: "true" if need to disable the scan change this to "false" 
#Pass the anchore cli artifactory image 
#pass the anchore engine user name, password and engine url
#***********************************************************************************************************************************#
anchore_properties:
  status:
    enabled: "false"
  image:
      name: artifactory.accuknox.com/accuknox/anchore-engine-cli:latest
      docker_run_params:  --entrypoint='' 
  anchore_conf:
  -   anchore.user: "admin"
      anchore.pass: "foobar"
      anchore.url: "http://jenkinsm01.accuknox.com:8228/v1/"
      

#***********************************************************************************************************************************#
#Pass the sonarqube name and sonarrunner name which is configured in Managed-Jenkins.  
#qualitygate_timeout is the maximum timeout of qualitygate to 10 Min# 
#***********************************************************************************************************************************#
sonar_properties:
  status:
    enabled: "true"
  quality_gate:
    enabled: "false"
    timeout: "5" 
  sonarqube_server_name: "sonar-scan"
  sonar_runnner_tools_name: "SonarQubeScanner"
  qualitygate_result_ignore: "no"

  image:
      name: artifactory.accuknox.com/accuknox/sonar-scanner-cli:latest
      docker_run_params:  -v /usr/local/bin:/usr/local/bin 
#**********************************************************************************************************************************#
#Below sonar_conf containts properties section to run Sonar, 
#Mention project key and name which was created in sonarqube server
#Mention the Host url where the sonar server is running
#for sonar credentials use username/API Token combo which was created in jenkins manage credentials.
#**********************************************************************************************************************************#
  sonar_conf:
  -   sonar.projectKey: sonar-ci-jenkins
      sonar.projectName: sonar-ci-jenkins
      sonar.projectVersion: 2.7
      sonar.language: java
      sonar.java.binaries: ./
      sonar.sourcepath: src
      sonar.sourceEncoding : UTF-8
      sonar.web.host: http://35.232.229.106:8220
      sonar.login: sonar-accu-cred


#***********************************************************************************************************************************#
# Lints and package the helm chart 
#helm build mention the name for helm build. specify the helm image and docker parameter to run the helm docker
#Mention helm dir and tag for build
#***********************************************************************************************************************************#
helm_build:
  - name: kubearmor
    image:
      name: "hypnoglow/kubernetes-helm"
      docker_run_params: ""
    helm_dir: helm
    tag: 1.0.1
    commands:
      - helm lint
      - helm package .

#***********************************************************************************************************************************#
# publish docker image, helmchart and artifacts to specified artifactory locations
#for artifactory credentials use username/API Token combo which was created in jenkins manage credentials.
#Pass the repostiry url for docker helm and artifacts where images need to push
#***********************************************************************************************************************************#
# publish docker image, helmchart and artifacts to specified artifactory locations
publish_config:
    publish_jfrog_credentials: "accunoxwithnexus"
    docker:
      snapshot: artifactory.accuknox.com/repository/docker-snapshot
      dev:  artifactory.accuknox.com/repository/accu-docker
      verify:  artifactory.accuknox.com/repository/accu-docker
      prod:  artifactory.accuknox.com/repository/accu-docker
    helm:
      snapshot: https://artifactory.accuknox.com/repository/helm-snapshot/
      dev: https://artifactory.accuknox.com/repository/helm-dev/
      verify: https://artifactory.accuknox.com/repository/helm-verify/
      prod: https://artifactory.accuknox.com/repository/helm-prod/

deploy_config:
  project: 'accuknox'
  gcr_credentials: 'gcr'
  cd_credentials: "github-token"
  cd_repo: github.com/accuknox/Argo-CD-Manifests.git
  cd_user: 'accuknox'
  cd_email: 'cd@accuknox.com'